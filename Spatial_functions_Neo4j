//DISTANCE BETWEEN HATFIELD AND PRETORIA STATION
MATCH(s1:station {name: "Hatfield"})
MATCH(s2:station {name: "Pretoria"})
RETURN round(point.distance(s1.location,s2.location),3)/1000

//FINDING HOW MANY FEATURES IN BOUNDING BOX
WITH point({longitude:  28.184713912215578, latitude: -25.773796154325318}) AS lowerLeft, point({longitude: 28.239987119633376, latitude: -25.745383601838313}) AS upperRight
MATCH (s:station)
WHERE point.withinBBox(s.location, lowerLeft, upperRight)
RETURN count(s)

//ROUTE PLANNING
//SHOREST ROUTE BETWEEN OR TAMBO AND PARK STATION
MATCH (c1:station { name: 'OR Tambo' })
MATCH (c2:station { name: 'Park' })
MATCH path = shortestPath((c1)-[*]-(c2))
RETURN path

//DIJKSTRA ALGORITHM 
MATCH (c1:station { name: 'Hatfield' })
MATCH (c2:station { name: 'OR Tambo' })
CALL apoc.algo.dijkstra(c1, c2, 'TO', 'cost') YIELD path, weight
RETURN path, weight

//TOP 3 ROUTES FROM HATFIELD TO SANDTON
MATCH (start:station {name: 'Hatfield'}), (end:station {name: 'Sandton'})
CALL apoc.algo.dijkstra(start, end, 'TO','cost' , 5, 3) YIELD path, weight
RETURN path, weight

//TO OR TAMBO VIA HATFIELD
MATCH (start:station {name:'Hatfield'}), (end:station {name: 'OR Tambo'}), (via:station {name:'Sandton'})
CALL apoc.algo.dijkstra(start, via, 'TO', 'cost') YIELD path, weight
WITH end, via, path AS p1, weight as w1
CALL apoc.algo.dijkstra(via, end, 'TO', 'cost') YIELD path, weight
return p1, path AS p2, weight+w1
